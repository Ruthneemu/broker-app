{"ast":null,"code":"// AuthHandler.js\nimport{useEffect}from'react';import{useNavigate}from'react-router-dom';import{supabase}from'./supabaseClient';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthHandler=()=>{const navigate=useNavigate();useEffect(()=>{const handleAuth=async()=>{try{// Get the hash fragment from the URL\nconst hash=window.location.hash.substring(1);if(!hash){navigate('/admin/login');return;}const params=new URLSearchParams(hash);const type=params.get('type');if(type==='recovery'){// This is a password recovery flow\n// Extract the tokens from the URL\nconst accessToken=params.get('access_token');const refreshToken=params.get('refresh_token');if(!accessToken||!refreshToken){console.error('Missing tokens in URL');navigate('/admin/login?error=missing_tokens');return;}// Set the session using the tokens\nconst{error}=await supabase.auth.setSession({access_token:accessToken,refresh_token:refreshToken});if(error){console.error('Error setting session:',error);navigate('/admin/login?error=session_error');return;}// Redirect to the reset password page\nnavigate('/admin/reset-password');}else{// Not a recovery flow, redirect to login\nnavigate('/admin/login');}}catch(err){console.error('Auth handler error:',err);navigate('/admin/login?error=auth_error');}};handleAuth();},[navigate]);return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 flex items-center justify-center p-4\",children:/*#__PURE__*/_jsx(\"div\",{className:\"text-white text-xl\",children:\"Processing authentication...\"})});};export default AuthHandler;","map":{"version":3,"names":["useEffect","useNavigate","supabase","jsx","_jsx","AuthHandler","navigate","handleAuth","hash","window","location","substring","params","URLSearchParams","type","get","accessToken","refreshToken","console","error","auth","setSession","access_token","refresh_token","err","className","children"],"sources":["/workspaces/broker-app/admin/src/AuthHandler.js"],"sourcesContent":["// AuthHandler.js\nimport { useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { supabase } from './supabaseClient';\n\nconst AuthHandler = () => {\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const handleAuth = async () => {\n      try {\n        // Get the hash fragment from the URL\n        const hash = window.location.hash.substring(1);\n        if (!hash) {\n          navigate('/admin/login');\n          return;\n        }\n\n        const params = new URLSearchParams(hash);\n        const type = params.get('type');\n        \n        if (type === 'recovery') {\n          // This is a password recovery flow\n          // Extract the tokens from the URL\n          const accessToken = params.get('access_token');\n          const refreshToken = params.get('refresh_token');\n          \n          if (!accessToken || !refreshToken) {\n            console.error('Missing tokens in URL');\n            navigate('/admin/login?error=missing_tokens');\n            return;\n          }\n\n          // Set the session using the tokens\n          const { error } = await supabase.auth.setSession({\n            access_token: accessToken,\n            refresh_token: refreshToken,\n          });\n          \n          if (error) {\n            console.error('Error setting session:', error);\n            navigate('/admin/login?error=session_error');\n            return;\n          }\n          \n          // Redirect to the reset password page\n          navigate('/admin/reset-password');\n        } else {\n          // Not a recovery flow, redirect to login\n          navigate('/admin/login');\n        }\n      } catch (err) {\n        console.error('Auth handler error:', err);\n        navigate('/admin/login?error=auth_error');\n      }\n    };\n    \n    handleAuth();\n  }, [navigate]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 to-gray-800 flex items-center justify-center p-4\">\n      <div className=\"text-white text-xl\">Processing authentication...</div>\n    </div>\n  );\n};\n\nexport default AuthHandler;\n"],"mappings":"AAAA;AACA,OAASA,SAAS,KAAQ,OAAO,CACjC,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,OAASC,QAAQ,KAAQ,kBAAkB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE5C,KAAM,CAAAC,WAAW,CAAGA,CAAA,GAAM,CACxB,KAAM,CAAAC,QAAQ,CAAGL,WAAW,CAAC,CAAC,CAE9BD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAO,UAAU,CAAG,KAAAA,CAAA,GAAY,CAC7B,GAAI,CACF;AACA,KAAM,CAAAC,IAAI,CAAGC,MAAM,CAACC,QAAQ,CAACF,IAAI,CAACG,SAAS,CAAC,CAAC,CAAC,CAC9C,GAAI,CAACH,IAAI,CAAE,CACTF,QAAQ,CAAC,cAAc,CAAC,CACxB,OACF,CAEA,KAAM,CAAAM,MAAM,CAAG,GAAI,CAAAC,eAAe,CAACL,IAAI,CAAC,CACxC,KAAM,CAAAM,IAAI,CAAGF,MAAM,CAACG,GAAG,CAAC,MAAM,CAAC,CAE/B,GAAID,IAAI,GAAK,UAAU,CAAE,CACvB;AACA;AACA,KAAM,CAAAE,WAAW,CAAGJ,MAAM,CAACG,GAAG,CAAC,cAAc,CAAC,CAC9C,KAAM,CAAAE,YAAY,CAAGL,MAAM,CAACG,GAAG,CAAC,eAAe,CAAC,CAEhD,GAAI,CAACC,WAAW,EAAI,CAACC,YAAY,CAAE,CACjCC,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAC,CACtCb,QAAQ,CAAC,mCAAmC,CAAC,CAC7C,OACF,CAEA;AACA,KAAM,CAAEa,KAAM,CAAC,CAAG,KAAM,CAAAjB,QAAQ,CAACkB,IAAI,CAACC,UAAU,CAAC,CAC/CC,YAAY,CAAEN,WAAW,CACzBO,aAAa,CAAEN,YACjB,CAAC,CAAC,CAEF,GAAIE,KAAK,CAAE,CACTD,OAAO,CAACC,KAAK,CAAC,wBAAwB,CAAEA,KAAK,CAAC,CAC9Cb,QAAQ,CAAC,kCAAkC,CAAC,CAC5C,OACF,CAEA;AACAA,QAAQ,CAAC,uBAAuB,CAAC,CACnC,CAAC,IAAM,CACL;AACAA,QAAQ,CAAC,cAAc,CAAC,CAC1B,CACF,CAAE,MAAOkB,GAAG,CAAE,CACZN,OAAO,CAACC,KAAK,CAAC,qBAAqB,CAAEK,GAAG,CAAC,CACzClB,QAAQ,CAAC,+BAA+B,CAAC,CAC3C,CACF,CAAC,CAEDC,UAAU,CAAC,CAAC,CACd,CAAC,CAAE,CAACD,QAAQ,CAAC,CAAC,CAEd,mBACEF,IAAA,QAAKqB,SAAS,CAAC,+FAA+F,CAAAC,QAAA,cAC5GtB,IAAA,QAAKqB,SAAS,CAAC,oBAAoB,CAAAC,QAAA,CAAC,8BAA4B,CAAK,CAAC,CACnE,CAAC,CAEV,CAAC,CAED,cAAe,CAAArB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}